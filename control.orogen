name "control"
version "0.1"

using_toolkit "dfki"
using_toolkit "controldev"
using_toolkit "hbridge"
using_library "hbridge"

import_types_from "ControllerTypes.hpp"

task_context "Controller" do
    input_port("status", "hbridge/Status").
        doc("Status of all hbridges. A data connection type is recommended")

    input_port('cmd_in', 'controldev/MotionCommand').
        doc('input command in rotation and translation. Requires a data connection type.')

    output_port("cmd_out", "hbridge/SimpleCommand").
        doc("output command for the hbridges. A data connection type is recommended")
end

task_context "SimpleController" do
    subclasses "Controller"
end

task_context "PIVController" do
    subclasses "Controller"
    input_port('raw_cmd_in', 'controldev::RawCommand').
        doc('input command in rotation and translation. Requires a data connection type.')
end

task_context "VariableSpeedController" do
    subclasses "Controller"
end

task_context "TwoPhaseController" do
    subclasses "Controller"
    output_port("internal_state", "controller/TwoPhaseState").
        doc("internal state of the controller")
end

task_context "FourWheelController" do
    subclasses "Controller"

    input_port('raw_cmd_in', 'controldev::RawCommand').
        doc('input command in rotation and translation. Requires a data connection type.')
end

using_task_library "hbridge"
using_task_library "can"
deployment "test_pivcontrol" do
    can     = task('can', "can::Task").
        realtime.
        highest_priority.
	periodic(0.001)
    hbridge = task("hbridge", "hbridge::Task").
    	realtime.
	highest_priority.
        triggered
    piv_controller = task("PIVController", "control::PIVController").
        realtime.
        periodic(0.001)

    add_default_logger
end
   
