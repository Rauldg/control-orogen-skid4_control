name "control"
version "0.1"

using_toolkit "base"
using_toolkit "controldev"
using_toolkit "hbridge"
using_library "hbridge"
using_library "motor_controller"
using_library "asguard"

import_types_from "ControllerTypes.hpp"

task_context "Controller" do
    abstract

    input_port("status", "hbridge/Status").
        doc("Status of all hbridges. A data connection type is recommended").
        needs_buffered_connection

    output_port("simple_command", "hbridge/SimpleCommand").
        doc("output command for the hbridges. A data connection type is recommended")
end

task_context "SimpleController" do
    subclasses "Controller"

    input_port('motion_command', 'controldev/MotionCommand').
        doc('input command in rotation and translation. Requires a data connection type.').
        needs_data_connection
end

task_context "PIVController" do
    subclasses "Controller"
    
    input_port('motion_command', 'controldev/MotionCommand').
        doc('input command in rotation and translation. Requires a data connection type.').
        needs_data_connection

    input_port('four_wheel_command', 'controldev::FourWheelCommand').
        doc('Reference velocity for PIV controller')

    property("experiment_on", "bool").
        doc('Runs the forward run experiment')

    property("forward_speed", "double").
        doc('Sets the forward run speed')

    property("offset_wheel_FL", "double").
        doc('Offset for Front Left wheel -100.0 to +100.0')

    property("offset_wheel_FR", "double").
        doc('Offset for Front Right -100.0 to +100.0')

    property("offset_wheel_RL", "double").
        doc('Offset fot Rear Left -100.0 to +100.0')

    property("offset_wheel_RR", "double").
        doc('Offset for Rear Right -100.0 to +100.0')
end

task_context "FourWheelController" do
    subclasses "Controller"

    input_port('four_wheel_command', 'controldev::FourWheelCommand').
        doc('Reference velocity for PIV controller')
end

using_task_library "hbridge"
using_task_library "can"
deployment "test_pivcontrol" do
    can     = task('can', "can::Task").
        realtime.
        highest_priority.
	periodic(0.001)
    hbridge = task("hbridge", "hbridge::Task").
    	realtime.
	highest_priority.
        triggered
    piv_controller = task("PIVController", "control::PIVController").
        realtime.
        periodic(0.001)

    add_default_logger
end
   
